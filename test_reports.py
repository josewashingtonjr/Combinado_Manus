#!/usr/bin/env python3.11
# -*- coding: utf-8 -*-

"""
Teste dos relat√≥rios funcionais do sistema
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import User, Order, Transaction, Wallet, Invite
from services.report_service import ReportService
from datetime import datetime, timedelta

def test_reports():
    """Testa os relat√≥rios funcionais"""
    with app.app_context():
        try:
            print("=== TESTE DOS RELAT√ìRIOS FUNCIONAIS ===")
            
            # Teste 1: Relat√≥rio de Contratos
            print("\n1. Testando Relat√≥rio de Contratos...")
            try:
                contracts_data = ReportService.get_contracts_report_data()
                print(f"   ‚úÖ Total de contratos: {contracts_data['total_contratos']}")
                print(f"   ‚úÖ Valor total: R$ {contracts_data['valor_total']:,.2f}")
                print(f"   ‚úÖ Status encontrados: {list(contracts_data['status_stats'].keys())}")
            except Exception as e:
                print(f"   ‚ùå Erro no relat√≥rio de contratos: {str(e)}")
            
            # Teste 2: Relat√≥rio de Usu√°rios
            print("\n2. Testando Relat√≥rio de Usu√°rios...")
            try:
                users_data = ReportService.get_users_report_data()
                print(f"   ‚úÖ Total de usu√°rios: {users_data['total_usuarios']}")
                print(f"   ‚úÖ Usu√°rios ativos: {users_data['usuarios_ativos']}")
                print(f"   ‚úÖ Clientes: {users_data['clientes']}")
                print(f"   ‚úÖ Prestadores: {users_data['prestadores']}")
                print(f"   ‚úÖ Saldo total: R$ {users_data['saldo_total']:,.2f}")
            except Exception as e:
                print(f"   ‚ùå Erro no relat√≥rio de usu√°rios: {str(e)}")
            
            # Teste 3: Relat√≥rio Financeiro
            print("\n3. Testando Relat√≥rio Financeiro...")
            try:
                financial_data = ReportService.get_financial_report_data()
                print(f"   ‚úÖ Total de transa√ß√µes: {financial_data['total_transacoes']}")
                print(f"   ‚úÖ Volume total: R$ {financial_data['volume_total']:,.2f}")
                print(f"   ‚úÖ Receita de taxas: R$ {financial_data['receita_taxas']:,.2f}")
                print(f"   ‚úÖ Tipos de transa√ß√£o: {list(financial_data['transaction_stats'].keys())}")
            except Exception as e:
                print(f"   ‚ùå Erro no relat√≥rio financeiro: {str(e)}")
            
            # Teste 4: Relat√≥rio de Convites
            print("\n4. Testando Relat√≥rio de Convites...")
            try:
                invites_data = ReportService.get_invites_report_data()
                print(f"   ‚úÖ Total de convites: {invites_data['total_convites']}")
                print(f"   ‚úÖ Taxa de aceita√ß√£o: {invites_data['taxa_aceitacao']:.1f}%")
                print(f"   ‚úÖ Taxa de convers√£o: {invites_data['taxa_conversao']:.1f}%")
                print(f"   ‚úÖ Status encontrados: {list(invites_data['status_stats'].keys())}")
            except Exception as e:
                print(f"   ‚ùå Erro no relat√≥rio de convites: {str(e)}")
            
            # Teste 5: Exporta√ß√£o para Excel (apenas teste de gera√ß√£o)
            print("\n5. Testando Exporta√ß√£o para Excel...")
            try:
                # Testar exporta√ß√£o de contratos
                contracts_data = ReportService.get_contracts_report_data()
                excel_data = ReportService.export_contracts_to_excel(contracts_data)
                print(f"   ‚úÖ Excel de contratos gerado: {len(excel_data)} bytes")
                
                # Testar exporta√ß√£o de usu√°rios
                users_data = ReportService.get_users_report_data()
                excel_data = ReportService.export_users_to_excel(users_data)
                print(f"   ‚úÖ Excel de usu√°rios gerado: {len(excel_data)} bytes")
            except Exception as e:
                print(f"   ‚ùå Erro na exporta√ß√£o Excel: {str(e)}")
            
            # Teste 6: Exporta√ß√£o para PDF (apenas teste de gera√ß√£o)
            print("\n6. Testando Exporta√ß√£o para PDF...")
            try:
                # Testar exporta√ß√£o de contratos
                contracts_data = ReportService.get_contracts_report_data()
                pdf_data = ReportService.export_contracts_to_pdf(contracts_data)
                print(f"   ‚úÖ PDF de contratos gerado: {len(pdf_data)} bytes")
                
                # Testar exporta√ß√£o de usu√°rios
                users_data = ReportService.get_users_report_data()
                pdf_data = ReportService.export_users_to_pdf(users_data)
                print(f"   ‚úÖ PDF de usu√°rios gerado: {len(pdf_data)} bytes")
            except Exception as e:
                print(f"   ‚ùå Erro na exporta√ß√£o PDF: {str(e)}")
            
            # Teste 7: Filtros por Data
            print("\n7. Testando Filtros por Data...")
            try:
                # Testar filtro dos √∫ltimos 30 dias
                end_date = datetime.now()
                start_date = end_date - timedelta(days=30)
                
                filtered_data = ReportService.get_contracts_report_data(
                    start_date=start_date,
                    end_date=end_date
                )
                print(f"   ‚úÖ Contratos dos √∫ltimos 30 dias: {filtered_data['total_contratos']}")
                
                filtered_users = ReportService.get_users_report_data(
                    start_date=start_date,
                    end_date=end_date
                )
                print(f"   ‚úÖ Usu√°rios dos √∫ltimos 30 dias: {filtered_users['total_usuarios']}")
            except Exception as e:
                print(f"   ‚ùå Erro nos filtros por data: {str(e)}")
            
            print("\n=== TESTE CONCLU√çDO ===")
            print("‚úÖ Sistema de relat√≥rios funcionais implementado com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro geral no teste: {str(e)}")
            return False
        
        return True

if __name__ == "__main__":
    success = test_reports()
    if success:
        print("\nüéâ Todos os testes passaram! Os relat√≥rios est√£o funcionais.")
    else:
        print("\n‚ùå Alguns testes falharam. Verifique os erros acima.")