#!/usr/bin/env python3.11
# -*- coding: utf-8 -*-

"""
Teste para validar a implementa√ß√£o da cria√ß√£o de ordens com bloqueio de tokens em escrow
Tarefa 3.1: Implementar cria√ß√£o de ordens com bloqueio de tokens
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app
from models import db, User, Wallet, Order, Transaction
from services.order_service import OrderService
from services.wallet_service import WalletService

def test_order_creation_with_escrow():
    """Testa a cria√ß√£o de ordens com bloqueio autom√°tico de tokens em escrow"""
    
    with app.app_context():
        print("üß™ Iniciando teste de cria√ß√£o de ordens com escrow...")
        
        # Limpar dados de teste
        db.session.query(Transaction).delete()
        db.session.query(Order).delete()
        db.session.query(Wallet).delete()
        db.session.query(User).delete()
        db.session.commit()
        
        # 1. Criar usu√°rio cliente de teste
        print("\n1Ô∏è‚É£ Criando usu√°rio cliente de teste...")
        cliente = User(
            email="cliente@teste.com",
            nome="Cliente Teste",
            cpf="12345678901",
            roles="cliente"
        )
        cliente.set_password("senha123")
        db.session.add(cliente)
        db.session.commit()
        
        # 2. Criar carteira e adicionar saldo inicial
        print("2Ô∏è‚É£ Criando carteira e adicionando saldo inicial...")
        WalletService.ensure_user_has_wallet(cliente.id)
        
        # Simular compra de tokens (admin ‚Üí cliente)
        WalletService.admin_sell_tokens_to_user(
            user_id=cliente.id,
            amount=1000.0,
            description="Saldo inicial para teste"
        )
        
        # Verificar saldo inicial
        wallet_info = WalletService.get_wallet_info(cliente.id)
        print(f"   ‚úÖ Saldo inicial: R$ {wallet_info['balance']:.2f}")
        print(f"   ‚úÖ Escrow inicial: R$ {wallet_info['escrow_balance']:.2f}")
        
        # 3. Testar valida√ß√£o de cria√ß√£o de ordem
        print("\n3Ô∏è‚É£ Testando valida√ß√£o de cria√ß√£o de ordem...")
        
        # Teste com valor v√°lido
        validation = OrderService.validate_order_creation(cliente.id, 100.0)
        assert validation['valid'] == True, "Valida√ß√£o deveria passar para valor v√°lido"
        print("   ‚úÖ Valida√ß√£o passou para valor dentro do saldo")
        
        # Teste com valor maior que saldo
        validation = OrderService.validate_order_creation(cliente.id, 1500.0)
        assert validation['valid'] == False, "Valida√ß√£o deveria falhar para valor maior que saldo"
        print("   ‚úÖ Valida√ß√£o falhou corretamente para valor maior que saldo")
        
        # 4. Criar ordem de servi√ßo
        print("\n4Ô∏è‚É£ Criando ordem de servi√ßo com bloqueio de escrow...")
        
        order_data = {
            'client_id': cliente.id,
            'title': 'Desenvolvimento de Website',
            'description': 'Criar um website institucional moderno e responsivo com 5 p√°ginas principais.',
            'value': 500.0
        }
        
        result = OrderService.create_order(**order_data)
        order = result['order']
        
        print(f"   ‚úÖ Ordem criada com ID: {order.id}")
        print(f"   ‚úÖ Status da ordem: {order.status}")
        print(f"   ‚úÖ Valor da ordem: R$ {order.value:.2f}")
        print(f"   ‚úÖ Transa√ß√£o de escrow ID: {result['escrow_transaction_id']}")
        
        # 5. Verificar estado da carteira ap√≥s cria√ß√£o
        print("\n5Ô∏è‚É£ Verificando estado da carteira ap√≥s cria√ß√£o...")
        
        wallet_info_after = WalletService.get_wallet_info(cliente.id)
        print(f"   ‚úÖ Saldo ap√≥s cria√ß√£o: R$ {wallet_info_after['balance']:.2f}")
        print(f"   ‚úÖ Escrow ap√≥s cria√ß√£o: R$ {wallet_info_after['escrow_balance']:.2f}")
        
        # Verifica√ß√µes
        expected_balance = 1000.0 - 500.0  # Saldo inicial - valor da ordem
        expected_escrow = 500.0  # Valor da ordem em escrow
        
        assert abs(wallet_info_after['balance'] - expected_balance) < 0.01, f"Saldo incorreto: esperado {expected_balance}, obtido {wallet_info_after['balance']}"
        assert abs(wallet_info_after['escrow_balance'] - expected_escrow) < 0.01, f"Escrow incorreto: esperado {expected_escrow}, obtido {wallet_info_after['escrow_balance']}"
        
        print("   ‚úÖ Saldos corretos ap√≥s bloqueio em escrow")
        
        # 6. Verificar transa√ß√£o de escrow
        print("\n6Ô∏è‚É£ Verificando transa√ß√£o de escrow...")
        
        escrow_transaction = Transaction.query.get(result['escrow_transaction_id'])
        assert escrow_transaction is not None, "Transa√ß√£o de escrow n√£o encontrada"
        assert escrow_transaction.type == "escrow_bloqueio", f"Tipo incorreto: {escrow_transaction.type}"
        assert escrow_transaction.amount == -500.0, f"Valor incorreto: {escrow_transaction.amount}"
        assert escrow_transaction.order_id == order.id, "Order ID incorreto na transa√ß√£o"
        
        print(f"   ‚úÖ Transa√ß√£o de escrow registrada corretamente")
        print(f"   ‚úÖ Tipo: {escrow_transaction.type}")
        print(f"   ‚úÖ Valor: R$ {abs(escrow_transaction.amount):.2f}")
        print(f"   ‚úÖ Descri√ß√£o: {escrow_transaction.description}")
        
        # 7. Verificar integridade do sistema
        print("\n7Ô∏è‚É£ Verificando integridade do sistema...")
        
        integrity = WalletService.validate_transaction_integrity(cliente.id)
        assert integrity['is_valid'] == True, f"Integridade falhou: {integrity}"
        
        print("   ‚úÖ Integridade do sistema validada")
        print(f"   ‚úÖ Saldo calculado: R$ {integrity['calculated_balance']:.2f}")
        print(f"   ‚úÖ Escrow calculado: R$ {integrity['calculated_escrow']:.2f}")
        
        # 8. Testar cria√ß√£o de segunda ordem (saldo insuficiente)
        print("\n8Ô∏è‚É£ Testando cria√ß√£o com saldo insuficiente...")
        
        try:
            OrderService.create_order(
                client_id=cliente.id,
                title='Ordem Imposs√≠vel',
                description='Esta ordem n√£o deveria ser criada',
                value=600.0  # Maior que saldo dispon√≠vel (500)
            )
            assert False, "Ordem n√£o deveria ter sido criada com saldo insuficiente"
        except ValueError as e:
            print(f"   ‚úÖ Erro esperado capturado: {str(e)}")
        
        # 9. Verificar que tokens n√£o sa√≠ram do sistema
        print("\n9Ô∏è‚É£ Verificando que tokens n√£o sa√≠ram do sistema...")
        
        # Total de tokens no sistema deve ser o mesmo
        admin_wallet = WalletService.get_admin_wallet_info()
        user_wallet = WalletService.get_wallet_info(cliente.id)
        
        total_tokens = admin_wallet['balance'] + user_wallet['balance'] + user_wallet['escrow_balance']
        print(f"   ‚úÖ Total de tokens no sistema: {total_tokens:.2f}")
        print(f"   ‚úÖ Admin: {admin_wallet['balance']:.2f}")
        print(f"   ‚úÖ Cliente (saldo): {user_wallet['balance']:.2f}")
        print(f"   ‚úÖ Cliente (escrow): {user_wallet['escrow_balance']:.2f}")
        
        # Verificar resumo do sistema
        token_summary = WalletService.get_system_token_summary()
        print(f"   ‚úÖ Tokens criados: {token_summary['total_tokens_created']:.2f}")
        print(f"   ‚úÖ Em circula√ß√£o: {token_summary['tokens_in_circulation']:.2f}")
        
        print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ Cria√ß√£o de ordens com bloqueio de escrow implementada corretamente")
        print("‚úÖ Tokens permanecem no sistema (saldo ‚Üí escrow)")
        print("‚úÖ Valida√ß√µes de saldo funcionando")
        print("‚úÖ Transa√ß√µes registradas com rastreabilidade")
        print("‚úÖ Integridade do sistema mantida")
        
        return True

def test_order_states_flow():
    """Testa o fluxo de estados das ordens conforme Planta Arquitet√¥nica"""
    
    with app.app_context():
        print("\nüîÑ Testando fluxo de estados das ordens...")
        
        # Buscar ordem criada no teste anterior
        order = Order.query.first()
        if not order:
            print("‚ùå Nenhuma ordem encontrada para testar estados")
            return False
        
        print(f"üìã Ordem ID {order.id}: {order.title}")
        print(f"   Status inicial: {order.status}")
        
        # Verificar estado inicial
        assert order.status == 'disponivel', f"Estado inicial incorreto: {order.status}"
        print("   ‚úÖ Estado inicial 'disponivel' correto")
        
        # Criar prestador para aceitar a ordem
        prestador = User(
            email="prestador@teste.com",
            nome="Prestador Teste",
            cpf="98765432100",
            roles="prestador"
        )
        prestador.set_password("senha123")
        db.session.add(prestador)
        db.session.commit()
        
        # Aceitar ordem
        print("\n   Aceitando ordem...")
        success = OrderService.accept_order(prestador.id, order.id)
        assert success == True, "Aceita√ß√£o da ordem falhou"
        
        # Recarregar ordem do banco
        db.session.refresh(order)
        print(f"   Status ap√≥s aceita√ß√£o: {order.status}")
        print(f"   Prestador ID: {order.provider_id}")
        print(f"   Aceita em: {order.accepted_at}")
        
        assert order.status == 'aceita', f"Estado ap√≥s aceita√ß√£o incorreto: {order.status}"
        assert order.provider_id == prestador.id, "Prestador n√£o foi associado corretamente"
        assert order.accepted_at is not None, "Data de aceita√ß√£o n√£o foi registrada"
        
        print("   ‚úÖ Aceita√ß√£o da ordem funcionando corretamente")
        
        print("\nüéØ Fluxo de estados validado com sucesso!")
        return True

if __name__ == "__main__":
    try:
        # Executar testes
        test_order_creation_with_escrow()
        test_order_states_flow()
        
        print("\n" + "="*60)
        print("üèÜ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Tarefa 3.1 implementada com sucesso")
        print("‚úÖ Sistema de cria√ß√£o de ordens com escrow funcionando")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)